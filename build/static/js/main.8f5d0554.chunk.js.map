{"version":3,"sources":["Component/LoginForm/LoginForm.js","Container/Login/Login.js","Component/Navbar/Navbar.js","Component/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","state","username","password","pwdVal","ifClicked","valAlert","type","msg","SubmitText","usernameChangeHandler","event","setState","target","value","passwordChangeHandler","postCredHandler","postData","sid","pwd","axios","post","then","res","info","data","code","console","log","catch","err","this","Alert","className","variant","id","Form","Group","controlId","Control","placeholder","onChange","Button","block","onClick","Text","Component","login","navbar","Navbar","bg","Brand","href","Nav","Item","Link","footer","rel","App","Login","Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f5d0554.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './LoginForm.css';\nimport Alert from 'react-bootstrap/Alert';\nimport axios from 'axios';\n\n\nclass LoginForm extends Component {\n\n    state = {\n        username: null,\n        password: null,\n        pwdVal: null,\n        ifClicked: false,\n        valAlert: {\n            type: null,\n            msg: null,\n        },\n        SubmitText: '提交',\n        \n    }\n    \n    usernameChangeHandler = (event) => {\n        this.setState({\n            username: event.target.value,\n        })\n    }\n\n    passwordChangeHandler = (event) => {\n        this.setState({\n            password: event.target.value,\n        })\n    }\n\n    \n\n\n    postCredHandler = () => {\n        this.setState({\n            ifClicked: true,\n        });\n\n        const postData = {\n            sid: this.state.username,\n            pwd: this.state.password,\n        }\n\n        axios.post('https://smp-api.cloud.airscr.com/api/login', postData)\n            .then((res) => {\n                this.setState({\n                    info: res.data,\n                })\n\n                if (this.state.info.code !== 200){\n                    this.setState({\n                        ifClicked: false,\n                        pwdVal: false,\n                    })\n                }\n                else if(this.state.info.code === 200){\n                    this.setState({\n                        pwdVal: true,\n                    })\n                }\n\n                \n                console.log(\"RESPONSE RECEIVED: \", this.state.info);\n                console.log(res);\n              })\n              .catch((err) => {\n                \n                console.log(\"AXIOS ERROR: \", err);\n              })\n\n    }\n\n\n    \n    componentDidUpdate(){\n        if(this.state.ifClicked && this.state.SubmitText === '提交'){\n            this.setState({\n                SubmitText: '请稍等...',\n            })\n        }\n\n        if(!this.state.ifClicked && this.state.SubmitText === '请稍等...'){\n            this.setState({\n                SubmitText: '提交',\n            })\n        }\n\n        if(this.state.valAlert.type === null && this.state.valAlert.type !== 'success' && this.state.valAlert.type !== 'danger' && this.state.pwdVal === true){\n            this.setState({\n                valAlert: {\n                    type: 'success',\n                    msg: 'hey, u r good to go. Note: This notice will not be included in the final version.'\n                }\n            })            \n        }\n\n        if(this.state.valAlert.type === null && this.state.valAlert.type !== 'success' && this.state.valAlert.type !== 'danger' && this.state.pwdVal === false){\n            this.setState({\n                valAlert: {\n                    type: 'danger',\n                    msg: 'hey, u\\'d better check your info again. Note: This notice will not be included in the final version.'\n                }\n            })            \n        }\n\n        if(this.state.valAlert.type === 'success' && this.state.pwdVal === false){\n            this.setState({\n                valAlert: {\n                    type: 'danger',\n                    msg: 'hey, u\\'d better check your info again. Note: This notice will not be included in the final version.'\n                }\n            }) \n        }\n\n        if(this.state.valAlert.type === 'danger' && this.state.pwdVal === true){\n            this.setState({\n                valAlert: {\n                    type: 'success',\n                    msg: 'hey, u r good to go. Note: This notice will not be included in the final version.'\n                }\n            }) \n        }\n    }\n\n    \n    \n\n    render() {\n\n        return (\n            <div>\n                <Alert className = 'InFormAlert' variant = 'warning' id = 'alertConstuction'> The site is still under constuction.<br></br> <strong>Note</strong>: Now user credentials can be validated on this <em>single page</em>. If the credentials are correct, the button text would not be modified which is set on purpose. For the final version, the page will be redirected to the next page.</Alert>\n                <Alert className = 'InFormAlert' variant = 'info' id = 'alertBrowser'> Internet Explorer is not supported. For better performance, browsers based on the Chromium core is recommended.</Alert>\n                \n                <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <h1>登录 - 晨跑管理系统</h1>\n                        <h1> </h1>\n                        <Form.Control type=\"text\" placeholder=\"学号\" onChange = {(event) => this.usernameChangeHandler(event)} />\n                    </Form.Group>    \n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Control type=\"password\" placeholder=\"密码\" onChange = {(event) => this.passwordChangeHandler(event)} />\n                    </Form.Group>\n                        <Button block variant=\"primary\" onClick = {this.postCredHandler}>\n                            {this.state.SubmitText}\n                        </Button>\n                        <p></p>\n                        <Form.Text className=\"text-muted\" >\n                            忘记密码?\n                        </Form.Text>\n                </Form>\n                <Alert variant = {this.state.valAlert.type} className = 'InFormAlert' id='pwdAlertInfo' > {this.state.valAlert.msg}</Alert>\n            </div>\n        )\n    }\n}\n\nexport default LoginForm;","import React from 'react';\nimport LoginForm from '../../Component/LoginForm/LoginForm';\n\nconst login = () => {\n\n    return(\n        <LoginForm />        \n    )\n}\n\nexport default login;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nconst navbar = () => {\n    return(\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">晨跑管理系统</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Item><Nav.Link>登录</Nav.Link></Nav.Item>\n                \n            </Nav>\n        </Navbar>\n    )\n}\n\nexport default navbar;","import React from 'react';\n\n const footer = () => {\n    return(\n        <footer>\n            <p> S Manager Panel | <a href=\"https://io.airscr.com/privacy-and-terms/\" target=\"_blank\" rel=\"noopener noreferrer\">Privacy &amp; Terms</a> | Version: 1.0.2</p>\n        </footer>        \n    )\n }\n export default footer;","import React from 'react';\nimport './App.css';\nimport Login from './Container/Login/Login';\nimport Navbar from './Component/Navbar/Navbar';\nimport Footer from './Component/Footer/Footer';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <header>\n        <Navbar />\n      </header>\n\n      <body>\n        <Login />\n      </body>\n\n    <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}